1. 리액트 작동 방식
  - 리액트로 제작했기에 JSX를 통해 자체 HTML을 구축했죠?
  - 이 과정을 통해 <App />이라는 컴포넌트를 구축하게 된거예요~
  - 근데 이 컴포넌트는 기본적으로 자체 html 요소일 뿐입니다!
  - 앞서 말했다시피, 선언적 방식으로 작성했죠?
  - 이 말은 즉, 리액트로 목표 상태를 정의했고, 리액트는 실제로 화면에 보이는것을 업데이트 하는 DOM 지시사항들을 생성/실행하는 역할을 하고 있어요~
  - 즉 아래 예시 코드에서 확인할 수 있는 App.js 폴더 내의 html 구문들은 우리가 원하는 목표 상태를 선언적 방식으로 작성한 코드이고,
  - 이게 가능한 이유는, index.js 파일에 App 컴포넌트를 만들어 연결해놨기 때문에
  - 이 자체 App의 Html 요소라고 할 수 있어요.
  - 추가로, App.js 파일 내부는 그 자체로 함수라고 할 수 있는데, 그 내용은 html 코드의 반환을 말하고 있쬬?
  - 그래서 npm start로 실행한 화면에는 이 html 코드가 나타납니다.
  
  
  예시)
    App.js
      function App() { 
        return (
          <div>
            <h2>Let's get started!</h2>
            <p>This is also visible!</p>
            // <p>태그를 추가했음 !!
          </div>
        );
      }
      export default App;
      
2. 기억할 것
  - 일반적인 JavaScript에서는 (= 바닐라 자바스크립트로 작성 시)
    * 페이지에서 어떤 요소를 선택하려면 document.getElementById('root')를 입력해도 끝난게 아님!
    * 단락을 추가하고 싶다면 document.getElementById('root').innerHTML=''를 설정해줘야 함
    * 혹은, 먼저 단락을 만드는 document.createElement('p')로 새로운 요소를 생성함
    * 그리고 const para = document.createElement('p') 처럼 이걸 단락으로 선언할 수 있고
    * textContent를 사용해 para.textContent = 'This is also visible'을 설정하면
    * DOM에 있는 특정 위치에 도달하여 document.getElementById('root').append(para)를 호출한 다음
    * 위의 생성된 단락 para를 추가함
    // 위 같은 내용을 명령형 접근방식이라고 함
  
  - React에서는
  
  (예시)
    document.getElementById('root')
