1. 실습 파일
  - react 코드는 결국 그냥 java script 코드라는것.
  
  1) src 폴더
    - 주로 이 폴더 내부에서 설정하게 됨
    
    (1) index.js
      - 명시하진 않았지만 해당 파일이 페이지를 불러올 때마다 처음으로 실행되는 코드 파일임
      - 여기 있는 코드가 실행되는게 아니라, 변환된 버전의 코드가 실행되는거임
      - npm start를 치면 그 이후에 파일을 확인하고, 변환하는 과정이 시작되는거고, 이 코드만으로는 작동 안할거다.
      예시)
        import ReactDOM from 'react-dom/client';
        // react-dom이라는 제 3자 라이브러리로부터 ReactDOM 객체를 가져오는 구문
        // 로컬에 설치한 의존성 중 하나임
        // 이 구문으로 인해 해당 라이브러리가 제공하는 기능을 index.js 에서 사용할 수 있음
        
        import './index.css'
        // CSS 파일을 JS 파일로 변환하는 것과 같음
        // 바닐라 자바스크립트에선 작동하지 않는 구문. 리액트가 변환해주는 구문임!
        // 해당 파일을 index.js 파일로 가져옴
        
        import App from './App';
        // App 이라는 파일에 작성되어있는 App 을 현재 파일로 가져옴
        
        const root = ReactDOM.createRoot(document.getElementById('root'));
        // 위에서 가져온 ReactDOM에 createRoot 메서드를 호출함
        // 주요 엔트리 포인트를 생성한것
        // React로 구축할 전반적인 사용자 인터페이스에 대한 주요 훅(Hook)을 의미함
        // Create Root의 기능
          (: React로 구축할 사용자 인터페이스인 react 애플리케이션을 불러온 웹페이지 상에서 어디에 배치해야 하는지 React에 알려주는 역할
        // 해당 명령어로 인해 public 폴더에 있는 index.html 파일로 이동함
        
        // ID인 root를 가진 이 코드가 div 태그임
          (: 정규 JavaScript 코드로 선택 후 react-dom 라이브러리로 선택함, 이 코드가 React 애플리케이션의 루트라는걸 React에 알리기 위해)
        // 메인 React 애플리케이션이 렌더링 될 곳임
        // 위 내용이 creatRoot()의 역할임
          참조) https://reactjs.org/docs/react-dom-client.html#createroot
        // root 객체를 상수나 변후로 저장 한 후 root 객체에 render() 메서드를 호출하여 div태그에 뭘 렌더링 해야 하는지 알림
          (<span>, <p> 등 다른 태그에도 연결이 가능하지만 일반적으로 <div>태그를 많이 이용함)
        // 마지막으로 ReactDom에 렌더링하고싶은게 있다고 알림
        
        root.render(<APP />);
        // JS 파일 안에 있는 HTML 구문같아 보이죠?
        // 원래대로라면 안 돌아갔겠지만 리액트이 변환해줌
        // 브라우저로 전달되기 전에 코드가 변환되기 때문에 문제없이 코드가 작동됨
        
        // <APP />는 JSX구문임
        // 결국 <APP />은 컴포넌트임
        // 
        
      (2) package.json
        "react": "^00.0.0",
        "react-dom": "^00.0.0",
        // 두 개의 개별 패키지지만 React 라이브버리로부터 같은 의존성을 가짐
        // 둘 중 뭘 가져와도 의존성을 가짐
        
      (3) App.js
        - js 파일 안에서 return 문이 돌아가는데, 돌아가는 파일이 HTML 구문이죠? 근데 문제 없어보이죠?
        - 이건 JSX의 기능이기 때문!
        
  2) pubilc 폴더
    - 보통 안건들이는 폴더이고, 중요한 파일이 하나 있는데 그게 바로...
    
      (1) index.html
        - 단일 HTMl 파일로, 브라우저가 불러오는 파일임
        - React 애플리케이션 전체에서 사용하는 유일한 HTML 파일
        - 이런걸 "단일페이지 애플리케이션" 이라고 함
        - React에서 일어나는 모든 변화 등등을 다룸
        - 엔트리 포인트임
          (= React가 주도하는 사용자 인터페이스가 렌더링 되어야 하는 위치라고 이해하자)
        - 정규 HTMl 문서구조를 갖추고 있음
        
        <div id= "root"></div>
        // 이 div 태그는 id="root"를 포함함
        // 아무 컨텐츠도 갖지 않는 정규 div 태그임 하지만 index.js 파일에 작성한 root를 아이디로 가지죠?
        // 이 div 태그에 React가 주도하는 사용자 인터페이스를 추가하려 함. 즉, React로 구축할 사용자 인터페이스
        // React를 기반으로 하는 사용자 인터페이스가 렌더링되어야 하는건 이 div 태그임.
        
