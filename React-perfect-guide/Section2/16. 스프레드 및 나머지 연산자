1. 스프레드(Spread) OR 나머지(Rest) 연산자 ( ... )
  - 어디에 사용하는지에 따라 스프레드 또는 나머지 연산자 라고 부름
  
  1) 스프레드 연산자 ( ... )
    - 배열의 원소나 객체의 Property를 나누는데 사용
    
    예시)
      배열의 경우)
      const newArray = [ ...oldArray, 1, 2 ]
      : oldArray 배열에 있는 모든 원소들을 새로운 배열에 추가하고 거기에 원소 1, 2를 추가하고 싶은 경우 사용
        
      객체의 경우)
      const newObject = { ...oldObject, newProp: 5 }
      : oldObject의 모든 프로퍼티와 값을 꺼낸 뒤 새 객체의 키값으로 추가함
      
  2) 나머지 연산자 (...)
    - 함수의 인수 목록을 배열로 합치는데 사용
    - 함수의 인수 목록에서 사용
    - 사용 빈도는 낮지만 함수에서 사용됨
    
    예시)
      fuction sortArgs(...args) {
        return args.sort()
      }
      //sortArgs는 매개변수를 무제한으로 받음

  3) 스프레드 연산자와 나머지 연산자의 예시
    (1) 스프레드 연산자 예시
      배열의 경우)
      const numbers = [1, 2, 3];
      const newNumbers = [...numbers, 4];
      
      console.log(newnumbers);
      
      결과 : [1, 2, 3, 4]
      
      만약 스프레드 연산자가 없었다면 [[1, 2, 3], 4] 라는 결과를 출력했을것
      
      객체의 경우)
      const person = {
        name: 'Max'
      };
      const newPerson = {
        ...person,
        ahe: 28
      }
      console.log(newPerson);
      
      결과: [object Object] {
            age: 28,
            name: "Max"
          }
      
    (2) 나머지 연산자 예시
      const filter = (...args) => {
        return args.filter(el => el === 1);
        // ...은 레스트 연산자로 사용되었음 > 매개변수를 배열에 통합함 > 배열 메소드를 filter()처럼 사용 가능 > 
          filter는 배열에서 전달되는 모든 원소들에 대해 함수를 실행함 > 원소를 전달하고 화살표 함수를 사용하여 원소가 1과 같은지 아닌지를 true 혹은 false로 반환함
      }
      console.log(filter(1, 2, 3))
      
      결과 : [1]
      
